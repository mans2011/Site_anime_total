"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/anime/[id]/page",{

/***/ "(app-pages-browser)/./lib/userStorage.ts":
/*!****************************!*\
  !*** ./lib/userStorage.ts ***!
  \****************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   userStorage: () => (/* binding */ userStorage)\n/* harmony export */ });\n/* harmony import */ var _lib_supabaseClient__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/lib/supabaseClient */ \"(app-pages-browser)/./lib/supabaseClient.ts\");\n\nconst STORAGE_KEYS = {\n    CURRENT_USER: 'animeflix_current_user'\n};\n// ----- SUPABASE -----\nasync function fetchUserFromSupabase(userId) {\n    const { data, error } = await _lib_supabaseClient__WEBPACK_IMPORTED_MODULE_0__.supabase.from('profiles').select('id, full_name, email, avatar, watchlist, favorites, watchHistory, ratings').eq('id', userId).single();\n    if (error || !data) return null;\n    return {\n        id: data.id,\n        name: data.full_name || '',\n        email: data.email || '',\n        avatar: data.avatar || '',\n        watchlist: data.watchlist || [],\n        favorites: data.favorites || [],\n        watchHistory: data.watchHistory || [],\n        ratings: data.ratings || []\n    };\n}\nasync function updateUserOnSupabase(user) {\n    const { error } = await _lib_supabaseClient__WEBPACK_IMPORTED_MODULE_0__.supabase.from('profiles').upsert({\n        id: user.id,\n        full_name: user.name,\n        email: user.email,\n        avatar: user.avatar || null,\n        watchlist: user.watchlist,\n        favorites: user.favorites,\n        watchHistory: user.watchHistory,\n        ratings: user.ratings,\n        updated_at: new Date().toISOString()\n    });\n    if (error) console.error('Erro ao atualizar usuÃ¡rio no Supabase:', error);\n}\n// ----- STORAGE -----\nconst userStorage = {\n    getCurrentUser () {\n        if (false) {}\n        const userData = localStorage.getItem(STORAGE_KEYS.CURRENT_USER);\n        return userData ? JSON.parse(userData) : null;\n    },\n    async setCurrentUser (user) {\n        if (false) {}\n        if (user) {\n            localStorage.setItem(STORAGE_KEYS.CURRENT_USER, JSON.stringify(user));\n            await updateUserOnSupabase(user);\n        } else {\n            localStorage.removeItem(STORAGE_KEYS.CURRENT_USER);\n        }\n    },\n    async syncWithSupabase () {\n        const { data } = await _lib_supabaseClient__WEBPACK_IMPORTED_MODULE_0__.supabase.auth.getUser();\n        const authUser = data === null || data === void 0 ? void 0 : data.user;\n        if (!authUser) return;\n        const supabaseUser = await fetchUserFromSupabase(authUser.id);\n        if (!supabaseUser) return;\n        const localUser = this.getCurrentUser();\n        if (!localUser || JSON.stringify(localUser) !== JSON.stringify(supabaseUser)) {\n            localStorage.setItem(STORAGE_KEYS.CURRENT_USER, JSON.stringify(supabaseUser));\n        }\n    },\n    async addToWatchlist (animeId) {\n        const user = this.getCurrentUser();\n        if (!user) return;\n        if (!user.watchlist.includes(animeId)) {\n            user.watchlist.push(animeId);\n            await this.setCurrentUser(user);\n        }\n    },\n    async removeFromWatchlist (animeId) {\n        const user = this.getCurrentUser();\n        if (!user) return;\n        user.watchlist = user.watchlist.filter((id)=>id !== animeId);\n        await this.setCurrentUser(user);\n    },\n    async addToFavorites (animeId) {\n        const user = this.getCurrentUser();\n        if (!user) return;\n        if (!user.favorites.includes(animeId)) {\n            user.favorites.push(animeId);\n            await this.setCurrentUser(user);\n        }\n    },\n    async removeFromFavorites (animeId) {\n        const user = this.getCurrentUser();\n        if (!user) return;\n        user.favorites = user.favorites.filter((id)=>id !== animeId);\n        await this.setCurrentUser(user);\n    },\n    async addToWatchHistory (animeId, episodeNumber) {\n        const user = this.getCurrentUser();\n        if (!user) return;\n        const existingIndex = user.watchHistory.findIndex((h)=>h.animeId === animeId);\n        const historyEntry = {\n            animeId,\n            watchedAt: new Date().toISOString(),\n            episodeNumber\n        };\n        if (existingIndex >= 0) {\n            user.watchHistory[existingIndex] = historyEntry;\n        } else {\n            user.watchHistory.unshift(historyEntry);\n        }\n        if (user.watchHistory.length > 100) {\n            user.watchHistory = user.watchHistory.slice(0, 100);\n        }\n        await this.setCurrentUser(user);\n    },\n    async rateAnime (animeId, rating) {\n        const user = this.getCurrentUser();\n        if (!user) return;\n        const existingIndex = user.ratings.findIndex((r)=>r.animeId === animeId);\n        const ratingEntry = {\n            animeId,\n            rating,\n            ratedAt: new Date().toISOString()\n        };\n        if (existingIndex >= 0) {\n            user.ratings[existingIndex] = ratingEntry;\n        } else {\n            user.ratings.push(ratingEntry);\n        }\n        await this.setCurrentUser(user);\n    },\n    getUserRating (animeId) {\n        const user = this.getCurrentUser();\n        if (!user) return null;\n        const rating = user.ratings.find((r)=>r.animeId === animeId);\n        return rating ? rating.rating : null;\n    },\n    findUserByEmail (email) {\n        const user = this.getCurrentUser();\n        if ((user === null || user === void 0 ? void 0 : user.email) === email) return user;\n        return null;\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/userStorage.ts\n"));

/***/ })

});